version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start
    container_name: django-api
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    ports:
      - "8000:8000"
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    depends_on:
      - postgres
      - mailhog
    networks:
      - swifty-authors

  postgres:
    build:
      context: .
      dockerfile: ./docker/local/postgres/Dockerfile
    container_name: postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.local/.postgres
    networks:
      - swifty-authors

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"
    networks:
      - swifty-authors

networks:
  swifty-authors:
    driver: bridge

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  static_volume: {}
  media_volume: {}

# for checking env vars: --->
# docker-compose -f local.yml config

# for building: --->
# docker-compose -f local.yml up --build -d --remove-orphans

# for checking logs: --->
# docker-compose -f local.yml logs

# for checking if volumes were created: --->
# docker volume inspect swifty_authors_local_postgres_data
#--->>>
#swifty_authors_local_postgres_data
#swifty_authors_local_postgres_data_backups
#swifty_authors_media_volume
#swifty_authors_static_volume

# for checking postgres backups: --->
# docker-compose -f local.yml exec postgres backup
